const express = require('express');
const mongoose = require('mongoose');
const app = express();

// Middleware для обработки JSON
app.use(express.json());

// Подключение к базе данных MongoDB
async function connectToDatabase() {
    try {
        await mongoose.connect('mongodb://127.0.0.1:27017/students', {
            useNewUrlParser: true,
            useUnifiedTopology: true,
        });
        console.log('Connected to MongoDB');
    } catch (error) {
        console.error('Error connecting to MongoDB:', error);
    }
}
connectToDatabase();

// Схема и модель Student
const studentSchema = new mongoose.Schema({
    name: { type: String, required: true },
    age: { type: Number, required: true },
    major: { type: String, required: true },
    enrolled: { type: Boolean, required: true },
});

const Student = mongoose.model('Student', studentSchema);

// Функция для добавления студентов при запуске
async function addInitialStudents() {
    const students = [
        { name: 'Danel', age: 19, major: 'Comuter Sience', enrolled: true },
        { name: 'Madi(Danels husband)', age: 19, major: 'Comuter Sience', enrolled: true },
        { name: 'Madiyar', age: 19, major: 'Computer Science', enrolled: true },
        { name: 'Alikhan', age: 21, major: 'Biology', enrolled: true },
        { name: 'Nurbek', age: 23, major: 'Chemistry', enrolled: false },
    ];

    try {
        const existingStudents = await Student.find();
        if (existingStudents.length === 0) {
            await Student.insertMany(students);
            console.log('Initial students added to the database');
        } else {
            console.log('Students already exist in the database, skipping initialization');
        }
    } catch (error) {
        console.error('Error adding initial students:', error);
    }
}

// Маршруты CRUD

// 1. POST /students - Создать нового студента
app.post('/students', async (req, res) => {
    try {
        const newStudent = new Student(req.body);
        const savedStudent = await newStudent.save();
        res.status(201).json(savedStudent);
    } catch (error) {
        res.status(400).json({ error: error.message });
    }
});

// 2. GET /students - Получить всех студентов
app.get('/students', async (req, res) => {
    try {
        const students = await Student.find();
        res.json(students);
    } catch (error) {
        res.status(500).json({ error: error.message });
    }
});

// 3. GET /students/:id - Получить одного студента по ID
app.get('/students/:id', async (req, res) => {
    try {
        const student = await Student.findById(req.params.id);
        if (!student) {
            return res.status(404).json({ error: 'Student not found' });
        }
        res.json(student);
    } catch (error) {
        if (error instanceof mongoose.Error.CastError) {
            return res.status(400).json({ error: 'Invalid ID format' });
        }
        res.status(500).json({ error: error.message });
    }
});

// 4. PUT /students/:id - Обновить данные студента по ID
app.put('/students/:id', async (req, res) => {
    try {
        const updatedStudent = await Student.findByIdAndUpdate(req.params.id, req.body, { new: true });
        if (!updatedStudent) {
            return res.status(404).json({ error: 'Student not found' });
        }
        res.json(updatedStudent);
    } catch (error) {
        if (error instanceof mongoose.Error.CastError) {
            return res.status(400).json({ error: 'Invalid ID format' });
        }
        res.status(400).json({ error: error.message });
    }
});

// 5. DELETE /students/:id - Удалить студента по ID
app.delete('/students/:id', async (req, res) => {
    try {
        const deletedStudent = await Student.findByIdAndDelete(req.params.id);
        if (!deletedStudent) {
            return res.status(404).json({ error: 'Student not found' });
        }
        res.json({ message: 'Student deleted' });
    } catch (error) {
        if (error instanceof mongoose.Error.CastError) {
            return res.status(400).json({ error: 'Invalid ID format' });
        }
        res.status(500).json({ error: error.message });
    }
});

// Middleware для обработки некорректных маршрутов
app.use((req, res) => {
    res.status(404).json({ error: 'Route not found' });
});

// Запуск сервера и добавление студентов
const PORT = 3000;
app.listen(PORT, async () => {
    console.log(`Server running on http://localhost:${PORT}`);
    await addInitialStudents();
});
